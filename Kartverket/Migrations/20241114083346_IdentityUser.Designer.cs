// <auto-generated />
using System;
using Kartverket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kartverket.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241114083346_IdentityUser")]
    partial class IdentityUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Kartverket.Data.Ansatt", b =>
                {
                    b.Property<int>("AnsattId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnsattId"));

                    b.Property<int>("BrukerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FødselsDato")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AnsattId");

                    b.HasIndex("BrukerId");

                    b.ToTable("Ansatte");
                });

            modelBuilder.Entity("Kartverket.Data.Bruker", b =>
                {
                    b.Property<int>("BrukerNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BrukerNr"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BekreftPassord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Brukernavn")
                        .IsRequired()
                        .HasMaxLength(321)
                        .HasColumnType("varchar(321)");

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Etternavn")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Fornavn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Passord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostNr")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.HasKey("BrukerNr");

                    b.HasIndex("PostNr");

                    b.ToTable("Brukere");
                });

            modelBuilder.Entity("Kartverket.Data.BrukerID", b =>
                {
                    b.Property<int>("BrukerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BrukerId"));

                    b.Property<string>("Brukernavn")
                        .IsRequired()
                        .HasMaxLength(321)
                        .HasColumnType("varchar(321)");

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasMaxLength(321)
                        .HasColumnType("varchar(321)");

                    b.Property<string>("Passord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BrukerId");

                    b.ToTable("BrukerId");
                });

            modelBuilder.Entity("Kartverket.Data.GeoChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("GeoJson")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GeoChange");
                });

            modelBuilder.Entity("Kartverket.Data.GeoData", b =>
                {
                    b.Property<int>("GeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GeoId"));

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("GeoId");

                    b.ToTable("Geodata");
                });

            modelBuilder.Entity("Kartverket.Data.Gjest", b =>
                {
                    b.Property<int>("GjestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GjestId"));

                    b.HasKey("GjestId");

                    b.ToTable("Gjester");
                });

            modelBuilder.Entity("Kartverket.Data.Innmelder", b =>
                {
                    b.Property<int>("InnmelderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InnmelderId"));

                    b.Property<int>("BrukerId")
                        .HasColumnType("int");

                    b.HasKey("InnmelderId");

                    b.HasIndex("BrukerId");

                    b.ToTable("Innmeldere");
                });

            modelBuilder.Entity("Kartverket.Data.Innmelding", b =>
                {
                    b.Property<int>("InnmeldingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InnmeldingId"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("BrukerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dato")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("KatNr")
                        .HasColumnType("int");

                    b.HasKey("InnmeldingId");

                    b.HasIndex("BrukerId");

                    b.HasIndex("KatNr");

                    b.ToTable("Innmeldinger");
                });

            modelBuilder.Entity("Kartverket.Data.Kategori", b =>
                {
                    b.Property<int>("KatNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KatNr"));

                    b.Property<string>("KatNavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KatNr");

                    b.ToTable("Kategorier");
                });

            modelBuilder.Entity("Kartverket.Data.PostSted", b =>
                {
                    b.Property<string>("PostNr")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Sted")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("PostNr");

                    b.ToTable("PostSteder");
                });

            modelBuilder.Entity("Kartverket.Data.Vedlegg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FilData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("FilNavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GeoChangeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeoChangeId");

                    b.ToTable("Vedlegg");
                });

            modelBuilder.Entity("Kartverket.Data.Ansatt", b =>
                {
                    b.HasOne("Kartverket.Data.BrukerID", "Bruker")
                        .WithMany()
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruker");
                });

            modelBuilder.Entity("Kartverket.Data.Bruker", b =>
                {
                    b.HasOne("Kartverket.Data.PostSted", "PostSted")
                        .WithMany("Brukere")
                        .HasForeignKey("PostNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostSted");
                });

            modelBuilder.Entity("Kartverket.Data.Innmelder", b =>
                {
                    b.HasOne("Kartverket.Data.Bruker", "Bruker")
                        .WithMany()
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruker");
                });

            modelBuilder.Entity("Kartverket.Data.Innmelding", b =>
                {
                    b.HasOne("Kartverket.Data.Bruker", "Bruker")
                        .WithMany("Innmeldinger")
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kartverket.Data.Kategori", "Kategori")
                        .WithMany("Innmeldinger")
                        .HasForeignKey("KatNr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruker");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("Kartverket.Data.Vedlegg", b =>
                {
                    b.HasOne("Kartverket.Data.GeoChange", null)
                        .WithMany("Vedlegg")
                        .HasForeignKey("GeoChangeId");
                });

            modelBuilder.Entity("Kartverket.Data.Bruker", b =>
                {
                    b.Navigation("Innmeldinger");
                });

            modelBuilder.Entity("Kartverket.Data.GeoChange", b =>
                {
                    b.Navigation("Vedlegg");
                });

            modelBuilder.Entity("Kartverket.Data.Kategori", b =>
                {
                    b.Navigation("Innmeldinger");
                });

            modelBuilder.Entity("Kartverket.Data.PostSted", b =>
                {
                    b.Navigation("Brukere");
                });
#pragma warning restore 612, 618
        }
    }
}
