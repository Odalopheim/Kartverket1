<!DOCTYPE html>
<html lang="no">
<head>
<meta charset="utf-8"/>
<title>Kartverkskart</title>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

<style>
#map {height: 800px; width: 600px;}
</style>
</head>
<body>

@model List<Kartverket.Data.GeoChange>

@{
    ViewData["Title"] = "Overview";
}

<h2>Overview of Registered Changes</h2>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>GeoJSON</th>
            <th>Category</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model)
        {
            <tr>
                <td>@change.Id</td>
                <td>@change.GeoJson</td>
                <td>@change.Category</td>
                <td>@change.Description</td>
            </tr>
        }
    </tbody>
</table>

<div id="map"></div>

@section Scripts {
    <script>
        // Initialize the map
        var map = L.map('map').setView([60.14, 10.25], 9);

        // Add Kartverket's topographic tile layer
        var topoLayer = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
        }).addTo(map);

        // Add Kartverket's gray tone map layer
        var grayLayer = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
        });

        // Layer control for switching between topographic and gray map layers
        var baseMaps = {
            "Topografisk kart": topoLayer,
            "Grått kart": grayLayer
        };

        L.control.layers(baseMaps).addTo(map);

        // Get the GeoJSON data from the model
        var changes = @Html.Raw(Json.Serialize(Model));

        var geoJsonLayers = [];

        // Iterate through each change and add it as a GeoJSON layer to the map
        changes.forEach(function(change) {
            try {
                var geoJsonData = JSON.parse(change.GeoJson);
                var layer = L.geoJSON(geoJsonData).addTo(map);
                geoJsonLayers.push(layer);
            } catch (e) {
                console.error("Invalid GeoJSON for change ID: " + change.Id);
            }
        });

        // Fit the map bounds to the combined extent of all layers
        if (geoJsonLayers.length > 0) {
            var group = new L.featureGroup(geoJsonLayers);
            map.fitBounds(group.getBounds());
        }
    </script>
}

</body>
</html>
